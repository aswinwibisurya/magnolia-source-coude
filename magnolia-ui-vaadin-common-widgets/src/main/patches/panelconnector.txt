--- /src/main/java/com/vaadin/client/ui/panel/PanelConnector.java	2013-09-27 18:30:04.000000000 +0200
+++ /src/main/java/com/vaadin/client/ui/panel/EnterFriendlyPanelConnector.java  2014-04-16 15:26:40.000000000 +0200
@@ -15,9 +15,14 @@
  */
 package com.vaadin.client.ui.panel;

+import com.google.gwt.dom.client.Element;
 import com.google.gwt.dom.client.NativeEvent;
 import com.google.gwt.dom.client.Style;
+import com.google.gwt.dom.client.TextAreaElement;
 import com.google.gwt.dom.client.Style.Unit;
+import com.google.gwt.event.dom.client.KeyCodes;
+import com.google.gwt.user.client.DOM;
+import com.google.gwt.user.client.Event;
 import com.vaadin.client.ApplicationConnection;
 import com.vaadin.client.ComponentConnector;
 import com.vaadin.client.ConnectorHierarchyChangeEvent;
@@ -32,6 +37,7 @@
 import com.vaadin.client.ui.SimpleManagedLayout;
 import com.vaadin.client.ui.VPanel;
 import com.vaadin.client.ui.layout.MayScrollChildren;
+import com.vaadin.client.ui.panel.PanelConnector;
 import com.vaadin.shared.MouseEventDetails;
 import com.vaadin.shared.ui.ComponentStateUtil;
 import com.vaadin.shared.ui.Connect;
@@ -40,7 +46,7 @@
 import com.vaadin.ui.Panel;

 @Connect(Panel.class)
-public class PanelConnector extends AbstractSingleComponentContainerConnector
+public class EnterFriendlyPanelConnector extends PanelConnector
         implements Paintable, SimpleManagedLayout, PostLayoutListener,
         MayScrollChildren {

@@ -58,32 +64,6 @@
     private Integer uidlScrollLeft;

     @Override
-    public void init() {
-        super.init();
-        VPanel panel = getWidget();
-        LayoutManager layoutManager = getLayoutManager();
-
-        layoutManager.registerDependency(this, panel.captionNode);
-        layoutManager.registerDependency(this, panel.bottomDecoration);
-        layoutManager.registerDependency(this, panel.contentNode);
-    }
-
-    @Override
-    public void onUnregister() {
-        VPanel panel = getWidget();
-        LayoutManager layoutManager = getLayoutManager();
-
-        layoutManager.unregisterDependency(this, panel.captionNode);
-        layoutManager.unregisterDependency(this, panel.bottomDecoration);
-        layoutManager.unregisterDependency(this, panel.contentNode);
-    }
-
-    @Override
-    public boolean delegateCaptionHandling() {
-        return false;
-    }
-
-    @Override
     public void updateFromUIDL(UIDL uidl, ApplicationConnection client) {
         if (isRealUpdate(uidl)) {

@@ -152,7 +132,7 @@
                 UIDL childUidl = uidl.getChildUIDL(i);
                 if (childUidl.getTag().equals("actions")) {
                     if (getWidget().shortcutHandler == null) {
-                        getWidget().shortcutHandler = new ShortcutActionHandler(
+                        getWidget().shortcutHandler = new EnterFriendlyShortcutActionHandler(
                                 getConnectorId(), client);
                     }
                     getWidget().shortcutHandler.updateActionMap(childUidl);
@@ -177,52 +157,6 @@
     }

     @Override
-    public void updateCaption(ComponentConnector component) {
-        // NOP: layouts caption, errors etc not rendered in Panel
-    }
-
-    @Override
-    public VPanel getWidget() {
-        return (VPanel) super.getWidget();
-    }
-
-    @Override
-    public void layout() {
-        updateSizes();
-    }
-
-    void updateSizes() {
-        VPanel panel = getWidget();
-
-        LayoutManager layoutManager = getLayoutManager();
-        Profiler.enter("PanelConnector.layout getHeights");
-        int top = layoutManager.getOuterHeight(panel.captionNode);
-        int bottom = layoutManager.getInnerHeight(panel.bottomDecoration);
-        Profiler.leave("PanelConnector.layout getHeights");
-
-        Profiler.enter("PanelConnector.layout modify style");
-        Style style = panel.getElement().getStyle();
-        panel.captionNode.getParentElement().getStyle()
-                .setMarginTop(-top, Unit.PX);
-        panel.bottomDecoration.getStyle().setMarginBottom(-bottom, Unit.PX);
-        style.setPaddingTop(top, Unit.PX);
-        style.setPaddingBottom(bottom, Unit.PX);
-        Profiler.leave("PanelConnector.layout modify style");
-
-        // Update scroll positions
-        Profiler.enter("PanelConnector.layout update scroll positions");
-        panel.contentNode.setScrollTop(panel.scrollTop);
-        panel.contentNode.setScrollLeft(panel.scrollLeft);
-        Profiler.leave("PanelConnector.layout update scroll positions");
-
-        // Read actual value back to ensure update logic is correct
-        Profiler.enter("PanelConnector.layout read scroll positions");
-        panel.scrollTop = panel.contentNode.getScrollTop();
-        panel.scrollLeft = panel.contentNode.getScrollLeft();
-        Profiler.leave("PanelConnector.layout read scroll positions");
-    }
-
-    @Override
     public void postLayout() {
         VPanel panel = getWidget();
         if (uidlScrollTop != null) {
@@ -242,15 +176,28 @@
         }
     }

-    @Override
-    public PanelState getState() {
-        return (PanelState) super.getState();
+    /**
+     * We override default {@link ShortcutActionHandler} to bypass shortcut handling when an 'ENTER' keyboard event comes from a text area.
+     */
+    private static class EnterFriendlyShortcutActionHandler extends ShortcutActionHandler {
+
+        public EnterFriendlyShortcutActionHandler(String pid, ApplicationConnection c) {
+            super(pid, c);
     }

     @Override
-    public void onConnectorHierarchyChange(ConnectorHierarchyChangeEvent event) {
-        // We always have 1 child, unless the child is hidden
-        getWidget().setWidget(getContentWidget());
+        public void handleKeyboardEvent(Event event) {
+            // ignore keyboard shortcut if enter was pressed within a textarea
+            int keyCode = DOM.eventGetKeyCode(event);
+            if (keyCode == KeyCodes.KEY_ENTER) {
+                Element el = DOM.eventGetTarget(event);
+                if (el.getTagName().equalsIgnoreCase(TextAreaElement.TAG)) {
+                    return;
+                }
+            }
+            super.handleKeyboardEvent(event);
+        }
+
     }

 }
