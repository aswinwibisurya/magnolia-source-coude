--- k1/src/main/java/com/vaadin/client/ui/treetable/TreeTableConnector.java	2014-08-28 18:17:28.000000000 +0200
+++ k2/src/main/java/com/vaadin/client/ui/treetable/TreeTableConnector.java	2014-11-21 18:58:44.000000000 +0100
@@ -21,27 +21,27 @@
 import com.vaadin.client.UIDL;
 import com.vaadin.client.WidgetUtil;
 import com.vaadin.client.ui.FocusableScrollPanel;
-import com.vaadin.client.ui.VScrollTable.VScrollTableBody.VScrollTableRow;
-import com.vaadin.client.ui.VTreeTable;
-import com.vaadin.client.ui.VTreeTable.PendingNavigationEvent;
-import com.vaadin.client.ui.VTreeTable.VTreeTableScrollBody.VTreeTableRow;
-import com.vaadin.client.ui.table.TableConnector;
-import com.vaadin.shared.ui.Connect;
+import com.vaadin.client.ui.VScrollTablePatched.VScrollTableBody.VScrollTableRow;
+import com.vaadin.client.ui.VTreeTablePatched;
+import com.vaadin.client.ui.VTreeTablePatched.PendingNavigationEvent;
+import com.vaadin.client.ui.VTreeTablePatched.VTreeTableScrollBody.VTreeTableRow;
+import com.vaadin.client.ui.table.TableConnectorPatched;
 import com.vaadin.shared.ui.treetable.TreeTableConstants;
 import com.vaadin.shared.ui.treetable.TreeTableState;
-import com.vaadin.ui.TreeTable;

-@Connect(TreeTable.class)
-public class TreeTableConnector extends TableConnector {
+//@Connect(TreeTable.class)
+public class TreeTableConnectorPatched extends TableConnectorPatched {

     @Override
     public void updateFromUIDL(UIDL uidl, ApplicationConnection client) {
         FocusableScrollPanel widget = null;
         int scrollPosition = 0;
-        if (getWidget().collapseRequest) {
+
+        // MGNLUI-961 Without lazy loading, we need to restore scrollTop not only for collapseRequests (part. 1)
+        // if (getWidget().collapseRequest) {
             widget = (FocusableScrollPanel) getWidget().getWidget(1);
             scrollPosition = widget.getScrollPosition();
-        }
+        // }
         getWidget().animationsEnabled = uidl.getBooleanAttribute("animate");
         getWidget().colIndexOfHierarchy = uidl
                 .hasAttribute(TreeTableConstants.ATTRIBUTE_HIERARCHY_COLUMN_INDEX) ? uidl
@@ -65,6 +65,8 @@
                 }
             }

+            // MGNLUI-961 Without lazy loading, we need to restore scrollTop not only for collapseRequests (part. 2)
+        }
             int scrollPosition2 = widget.getScrollPosition();
             if (scrollPosition != scrollPosition2) {
                 widget.setScrollPosition(scrollPosition);
@@ -72,8 +74,8 @@

             // check which rows are needed from the server and initiate a
             // deferred fetch
-            getWidget().onScroll(null);
-        }
+            // getWidget().onScroll(null);
+            // }
         // Recalculate table size if collapse request, or if page length is zero
         // (not sent by server) and row count changes (#7908).
         if (getWidget().collapseRequest
@@ -85,7 +87,7 @@
              * cleans up state. Be careful if touching this, you will break
              * pageLength=0 if you remove this.
              */
-            getWidget().triggerLazyColumnAdjustment(true);
+            getWidget().triggerLazyColumnAdjustment(false);

             getWidget().collapseRequest = false;
         }
@@ -114,8 +116,8 @@
     }

     @Override
-    public VTreeTable getWidget() {
-        return (VTreeTable) super.getWidget();
+    public VTreeTablePatched getWidget() {
+        return (VTreeTablePatched) super.getWidget();
     }

     @Override
@@ -129,7 +131,7 @@
         TooltipInfo info = null;

         if (element != getWidget().getElement()) {
-            Object node = WidgetUtil.findWidget(element, VTreeTableRow.class);
+            Object node = WidgetUtil.findWidget(element, getWidget().scrollBody.iterator().next().getClass());

             if (node != null) {
                 VTreeTableRow row = (VTreeTableRow) node;
