--- /src/main/java/com/vaadin/client/ui/VScrollTable.java	2013-10-08 10:45:04.000000000 +0200
+++ /src/main/java/com/vaadin/client/ui/VScrollTable.java	2014-04-24 18:37:35.000000000 +0200
@@ -49,6 +49,8 @@
 import com.google.gwt.dom.client.Touch;
 import com.google.gwt.event.dom.client.BlurEvent;
 import com.google.gwt.event.dom.client.BlurHandler;
+import com.google.gwt.event.dom.client.ContextMenuEvent;
+import com.google.gwt.event.dom.client.ContextMenuHandler;
 import com.google.gwt.event.dom.client.FocusEvent;
 import com.google.gwt.event.dom.client.FocusHandler;
 import com.google.gwt.event.dom.client.KeyCodes;
@@ -76,6 +78,7 @@
 import com.google.gwt.user.client.ui.HasWidgets;
 import com.google.gwt.user.client.ui.Panel;
 import com.google.gwt.user.client.ui.PopupPanel;
+import com.google.gwt.user.client.ui.RootPanel;
 import com.google.gwt.user.client.ui.UIObject;
 import com.google.gwt.user.client.ui.Widget;
 import com.vaadin.client.ApplicationConnection;
@@ -92,7 +95,7 @@
 import com.vaadin.client.VConsole;
 import com.vaadin.client.VTooltip;
 import com.vaadin.client.WidgetUtil;
-import com.vaadin.client.ui.VScrollTable.VScrollTableBody.VScrollTableRow;
+import com.vaadin.client.ui.VScrollTablePatched.VScrollTableBody.VScrollTableRow;
 import com.vaadin.client.ui.dd.DDUtil;
 import com.vaadin.client.ui.dd.VAbstractDropHandler;
 import com.vaadin.client.ui.dd.VAcceptCallback;
@@ -128,10 +131,28 @@
  *
  * TODO implement unregistering for child components in Cells
  */
-public class VScrollTable extends FlowPanel implements HasWidgets,
+public class VScrollTablePatched extends FlowPanel implements HasWidgets,
         ScrollHandler, VHasDropHandler, FocusHandler, BlurHandler, Focusable,
         ActionOwner, SubPartAware, DeferredWorker {

+    protected TableHead createTableHead() {
+        return new TableHead();
+    }
+
+    protected HeaderCell createHeaderCell(String colId, String headerText) {
+        return new HeaderCell(colId, headerText);
+    }
+
+    public boolean isVisibleInHierarchy() {
+        boolean isVisible = isVisible();
+        Widget current = getParent();
+        while (isVisible && current != null) {
+            isVisible &= current.isVisible();
+            current = current.getParent();
+        }
+        return isVisible;
+    }
+
     /**
      * Simple interface for parts of the table capable of owning a context menu.
      *
@@ -501,7 +522,7 @@
     public boolean headerChangedDuringUpdate = false;

     /** For internal use only. May be removed or replaced in the future. */
-    public final TableHead tHead = new TableHead();
+    public final TableHead tHead = createTableHead();

     /** For internal use only. May be removed or replaced in the future. */
     public final TableFooter tFoot = new TableFooter();
@@ -697,7 +718,7 @@
     private boolean hasFocus = false;
     private int dragmode;

-    private int multiselectmode;
+    protected int multiselectmode;

     /** For internal use only. May be removed or replaced in the future. */
     public int tabIndex;
@@ -813,7 +834,7 @@
         }
     };

-    public VScrollTable() {
+    public VScrollTablePatched() {
         setMultiSelectMode(MULTISELECT_MODE_DEFAULT);

         scrollBodyPanel.addFocusHandler(this);
@@ -1113,9 +1134,19 @@
         // Send the selected rows
         client.updateVariable(paintableId, "selected",
                 selectedRowKeys.toArray(new String[selectedRowKeys.size()]),
-                immediately);
+                false);
+
+        if (immediately) {
+            selectionSynchronizer.schedule(500);
+        }
+    }

+    private Timer selectionSynchronizer = new Timer() {
+        @Override
+        public void run() {
+            client.sendPendingVariableChanges();
     }
+    };

     /**
      * Get the key that moves the selection head upwards. By default it is the
@@ -1246,6 +1277,18 @@
         initialContentReceived = true;
         sizeNeedsInit = true;
         scrollBody.restoreRowVisibility();
+
+        // scroll to selection
+        if (scrollBodyPanel != null) {
+            VScrollTableRow row;
+            if (selectedRowKeys.size() == 1) {
+                String selectedRowKey = selectedRowKeys.iterator().next();
+                row = getRenderedRowByKey(selectedRowKey);
+            } else {
+                row = (VScrollTableRow) scrollBody.iterator().next();
+            }
+            lazyRevertFocusToRow(row);
+        }
     }

     /** For internal use only. May be removed or replaced in the future. */
@@ -1905,25 +1948,25 @@
         return -1;
     }

-    private boolean isMultiSelectModeSimple() {
+    protected boolean isMultiSelectModeSimple() {
         return selectMode == SelectMode.MULTI
                 && multiselectmode == MULTISELECT_MODE_SIMPLE;
     }

-    private boolean isSingleSelectMode() {
+    protected boolean isSingleSelectMode() {
         return selectMode == SelectMode.SINGLE;
     }

-    private boolean isMultiSelectModeAny() {
+    protected boolean isMultiSelectModeAny() {
         return selectMode == SelectMode.MULTI;
     }

-    private boolean isMultiSelectModeDefault() {
+    protected boolean isMultiSelectModeDefault() {
         return selectMode == SelectMode.MULTI
                 && multiselectmode == MULTISELECT_MODE_DEFAULT;
     }

-    private void setMultiSelectMode(int multiselectmode) {
+    protected void setMultiSelectMode(int multiselectmode) {
         if (BrowserInfo.get().isTouchDevice()) {
             // Always use the simple mode for touch devices that do not have
             // shift/ctrl keys
@@ -2159,7 +2202,7 @@
     @Override
     public void onAttach() {
         super.onAttach();
-        scrollBodyPanel.setScrollPosition(detachedScrollPosition);
+        // scrollBodyPanel.setScrollPosition(detachedScrollPosition);
     }

     /**
@@ -2175,6 +2218,10 @@
      * For internal use only. May be removed or replaced in the future.
      */
     public void sizeInit() {
+        if (!isVisibleInHierarchy()) {
+            return;
+        }
+
         sizeNeedsInit = false;

         scrollBody.setContainerHeight();
@@ -2398,10 +2445,10 @@
         headCells = tHead.iterator();
         while (headCells.hasNext()) {
             final HeaderCell hCell = (HeaderCell) headCells.next();
-            if (isNewBody || hCell.getWidth() == -1) {
+            // if (isNewBody || hCell.getWidth() == -1) {
                 final int w = widths[i];
                 setColWidth(i, w, false);
-            }
+            // }
             i++;
         }

@@ -2764,7 +2811,7 @@

         Element td = DOM.createTD();

-        Element captionContainer = DOM.createDiv();
+        protected Element captionContainer = DOM.createDiv();

         Element sortIndicator = DOM.createDiv();

@@ -3024,9 +3071,9 @@
             return cid;
         }

-        private void setSorted(boolean sorted) {
+        protected void setSorted(boolean sorted) {
             this.sorted = sorted;
-            updateStyleNames(VScrollTable.this.getStylePrimaryName());
+            updateStyleNames(VScrollTablePatched.this.getStylePrimaryName());
         }

         /**
@@ -3060,7 +3107,7 @@
                     handleCaptionEvent(event);
                     boolean stopPropagation = true;
                     if (event.getTypeInt() == Event.ONCONTEXTMENU
-                            && !client.hasEventListeners(VScrollTable.this,
+                            && !client.hasEventListeners(VScrollTablePatched.this,
                                     TableConstants.HEADER_CLICK_EVENT_ID)) {
                         // Prevent showing the browser's context menu only when
                         // there is a header click listener.
@@ -3082,9 +3129,9 @@
             // #12714 the shown "ghost element" should be inside
             // v-overlay-container, and it should contain the same styles as the
             // table to enable theming (except v-table & v-widget).
-            String stylePrimaryName = VScrollTable.this.getStylePrimaryName();
+            String stylePrimaryName = VScrollTablePatched.this.getStylePrimaryName();
             StringBuilder sb = new StringBuilder();
-            for (String s : VScrollTable.this.getStyleName().split(" ")) {
+            for (String s : VScrollTablePatched.this.getStyleName().split(" ")) {
                 if (!s.equals(StyleConstants.UI_WIDGET)) {
                     sb.append(s);
                     if (s.equals(stylePrimaryName)) {
@@ -3125,7 +3172,7 @@
          *            The click event
          */
         private void fireHeaderClickedEvent(Event event) {
-            if (client.hasEventListeners(VScrollTable.this,
+            if (client.hasEventListeners(VScrollTablePatched.this,
                     TableConstants.HEADER_CLICK_EVENT_ID)) {
                 MouseEventDetails details = MouseEventDetailsBuilder
                         .buildMouseEventDetails(event);
@@ -3390,7 +3437,7 @@

         public void setAlign(char c) {
             align = c;
-            updateStyleNames(VScrollTable.this.getStylePrimaryName());
+            updateStyleNames(VScrollTablePatched.this.getStylePrimaryName());
         }

         public char getAlign() {
@@ -3480,7 +3527,7 @@

         RowHeadersHeaderCell() {
             super(ROW_HEADER_COLUMN_KEY, "");
-            updateStyleNames(VScrollTable.this.getStylePrimaryName());
+            updateStyleNames(VScrollTablePatched.this.getStylePrimaryName());
         }

         @Override
@@ -3504,7 +3551,7 @@

         HashMap<String, HeaderCell> availableCells = new HashMap<String, HeaderCell>();

-        Element div = DOM.createDiv();
+        protected Element div = DOM.createDiv();
         Element hTableWrapper = DOM.createDiv();
         Element hTableContainer = DOM.createDiv();
         Element table = DOM.createTable();
@@ -3619,7 +3666,7 @@
                 String caption = buildCaptionHtmlSnippet(col);
                 HeaderCell c = getHeaderCell(cid);
                 if (c == null) {
-                    c = new HeaderCell(cid, caption);
+                    c = createHeaderCell(cid, caption);
                     availableCells.put(cid, c);
                     if (initializedAndAttached) {
                         // we will need a column width recalculation
@@ -3848,15 +3895,15 @@
             removeSlotFocus();
             if (index > 0) {
                 Element child = tr.getChild(index - 1).getFirstChild().cast();
-                child.setClassName(VScrollTable.this.getStylePrimaryName()
+                child.setClassName(VScrollTablePatched.this.getStylePrimaryName()
                         + "-resizer");
-                child.addClassName(VScrollTable.this.getStylePrimaryName()
+                child.addClassName(VScrollTablePatched.this.getStylePrimaryName()
                         + "-focus-slot-right");
             } else {
                 Element child = tr.getChild(index).getFirstChild().cast();
-                child.setClassName(VScrollTable.this.getStylePrimaryName()
+                child.setClassName(VScrollTablePatched.this.getStylePrimaryName()
                         + "-resizer");
-                child.addClassName(VScrollTable.this.getStylePrimaryName()
+                child.addClassName(VScrollTablePatched.this.getStylePrimaryName()
                         + "-focus-slot-left");
             }
             focusedSlot = index;
@@ -3868,12 +3915,12 @@
             }
             if (focusedSlot == 0) {
                 Element child = tr.getChild(focusedSlot).getFirstChild().cast();
-                child.setClassName(VScrollTable.this.getStylePrimaryName()
+                child.setClassName(VScrollTablePatched.this.getStylePrimaryName()
                         + "-resizer");
             } else if (focusedSlot > 0) {
                 Element child = tr.getChild(focusedSlot - 1).getFirstChild()
                         .cast();
-                child.setClassName(VScrollTable.this.getStylePrimaryName()
+                child.setClassName(VScrollTablePatched.this.getStylePrimaryName()
                         + "-resizer");
             }
             focusedSlot = -1;
@@ -3908,7 +3955,7 @@
             private VScrollTableRow currentlyFocusedRow;

             public VisibleColumnAction(String colKey) {
-                super(VScrollTable.TableHead.this);
+                super(VScrollTablePatched.TableHead.this);
                 this.colKey = colKey;
                 caption = tHead.getHeaderCell(colKey).getCaption();
                 currentlyFocusedRow = focusedRow;
@@ -4086,7 +4133,7 @@

             setElement(td);

-            updateStyleNames(VScrollTable.this.getStylePrimaryName());
+            updateStyleNames(VScrollTablePatched.this.getStylePrimaryName());
         }

         protected void updateStyleNames(String primaryStyleName) {
@@ -4285,7 +4332,7 @@
                 }
                 boolean stopPropagation = true;
                 if (event.getTypeInt() == Event.ONCONTEXTMENU
-                        && !client.hasEventListeners(VScrollTable.this,
+                        && !client.hasEventListeners(VScrollTablePatched.this,
                                 TableConstants.FOOTER_CLICK_EVENT_ID)) {
                     // Show browser context menu if a footer click listener is
                     // not present
@@ -4319,7 +4366,7 @@
          *            The click event
          */
         private void fireFooterClickedEvent(Event event) {
-            if (client.hasEventListeners(VScrollTable.this,
+            if (client.hasEventListeners(VScrollTablePatched.this,
                     TableConstants.FOOTER_CLICK_EVENT_ID)) {
                 MouseEventDetails details = MouseEventDetailsBuilder
                         .buildMouseEventDetails(event);
@@ -4446,7 +4493,7 @@
             availableCells.put(ROW_HEADER_COLUMN_KEY,
                     new RowHeadersFooterCell());

-            updateStyleNames(VScrollTable.this.getStylePrimaryName());
+            updateStyleNames(VScrollTablePatched.this.getStylePrimaryName());
         }

         protected void updateStyleNames(String primaryStyleName) {
@@ -4707,12 +4754,19 @@
      *
      */
     public class VScrollTableBody extends Panel {
+        protected VScrollTableRow createScrollTableRow(UIDL uidl, char[] aligns) {
+            return new VScrollTableRow(uidl, aligns);
+        }
+
+        protected VScrollTableRow createScrollTableRow() {
+            return new VScrollTableRow();
+        }

         public static final int DEFAULT_ROW_HEIGHT = 24;

         private double rowHeight = -1;

-        private final LinkedList<Widget> renderedRows = new LinkedList<Widget>();
+        public final LinkedList<Widget> renderedRows = new LinkedList<Widget>();

         /**
          * Due some optimizations row height measuring is deferred and initial
@@ -4793,7 +4847,7 @@
                             "translate3d(0,0,0)");
                 }
             }
-            updateStyleNames(VScrollTable.this.getStylePrimaryName());
+            updateStyleNames(VScrollTablePatched.this.getStylePrimaryName());
         }

         protected void updateStyleNames(String primaryStyleName) {
@@ -5037,7 +5091,7 @@
                 // This is a generated row.
                 return new VScrollTableGeneratedRow(uidl, aligns2);
             }
-            return new VScrollTableRow(uidl, aligns2);
+            return createScrollTableRow(uidl, aligns2);
         }

         private void addRowBeforeFirstRendered(VScrollTableRow row) {
@@ -5221,7 +5275,7 @@
             if (tBodyMeasurementsDone && !forceUpdate) {
                 return rowHeight;
             } else {
-                if (tBodyElement.getRows().getLength() > 0) {
+                if (tBodyElement.getRows().getLength() > 0 && getTableHeight() > 0) {
                     int tableHeight = getTableHeight();
                     int rowCount = tBodyElement.getRows().getLength();
                     rowHeight = tableHeight / (double) rowCount;
@@ -5243,7 +5297,7 @@
                         rowHeight = lastKnownRowHeight;
                     } else if (isAttached()) {
                         // measure row height by adding a dummy row
-                        VScrollTableRow scrollTableRow = new VScrollTableRow();
+                        VScrollTableRow scrollTableRow = createScrollTableRow();
                         tBodyElement.appendChild(scrollTableRow.getElement());
                         getRowHeight(forceUpdate);
                         tBodyElement.removeChild(scrollTableRow.getElement());
@@ -5313,6 +5367,9 @@
          * Method to return the space used for cell paddings + border.
          */
         private int getCellExtraWidth() {
+            if (!isVisibleInHierarchy()) {
+                return 0;
+            }
             if (cellExtraWidth < 0) {
                 detectExtrawidth();
             }
@@ -5345,8 +5402,8 @@
             NodeList<TableRowElement> rows = tBodyElement.getRows();
             if (rows.getLength() == 0) {
                 /* need to temporary add empty row and detect */
-                VScrollTableRow scrollTableRow = new VScrollTableRow();
-                scrollTableRow.updateStyleNames(VScrollTable.this
+                VScrollTableRow scrollTableRow = createScrollTableRow();
+                scrollTableRow.updateStyleNames(VScrollTablePatched.this
                         .getStylePrimaryName());
                 tBodyElement.appendChild(scrollTableRow.getElement());
                 detectExtrawidth();
@@ -5419,7 +5476,7 @@
         public class VScrollTableRow extends Panel implements ActionOwner,
                 ContextMenuOwner {

-            private static final int TOUCHSCROLL_TIMEOUT = 100;
+            private static final int TOUCHSCROLL_TIMEOUT = 500;
             private static final int DRAGMODE_MULTIROW = 2;
             protected ArrayList<Widget> childWidgets = new ArrayList<Widget>();
             private boolean selected = false;
@@ -5442,7 +5499,7 @@
             private TooltipInfo tooltipInfo = null;
             private Map<TableCellElement, TooltipInfo> cellToolTips = new HashMap<TableCellElement, TooltipInfo>();
             private boolean isDragging = false;
-            private String rowStyle = null;
+            protected String rowStyle = null;
             protected boolean applyZeroWidthFix = true;

             private VScrollTableRow(int rowKey) {
@@ -5464,7 +5521,7 @@
                 getElement().getStyle().setProperty("visibility", "hidden");

                 rowStyle = uidl.getStringAttribute("rowstyle");
-                updateStyleNames(VScrollTable.this.getStylePrimaryName());
+                updateStyleNames(VScrollTablePatched.this.getStylePrimaryName());

                 String rowDescription = uidl.getStringAttribute("rowdescr");
                 if (rowDescription != null && !rowDescription.equals("")) {
@@ -5530,7 +5587,7 @@
             protected void initCellWidths() {
                 final int cells = tHead.getVisibleCellCount();
                 for (int i = 0; i < cells; i++) {
-                    int w = VScrollTable.this.getColWidth(getColKeyByIndex(i));
+                    int w = VScrollTablePatched.this.getColWidth(getColKeyByIndex(i));
                     if (w < 0) {
                         w = 0;
                     }
@@ -5650,10 +5707,10 @@
                     removeStyleName(getStylePrimaryName());
                 }
                 if (!isOdd) {
-                    addStyleName(VScrollTable.this.getStylePrimaryName()
+                    addStyleName(VScrollTablePatched.this.getStylePrimaryName()
                             + "-row-odd");
                 } else {
-                    addStyleName(VScrollTable.this.getStylePrimaryName()
+                    addStyleName(VScrollTablePatched.this.getStylePrimaryName()
                             + "-row");
                 }
             }
@@ -5690,19 +5747,19 @@
                     String style, boolean textIsHTML, boolean sorted,
                     String description, final TableCellElement td) {
                 final Element container = DOM.createDiv();
-                container.setClassName(VScrollTable.this.getStylePrimaryName()
+                container.setClassName(VScrollTablePatched.this.getStylePrimaryName()
                         + "-cell-wrapper");

-                td.setClassName(VScrollTable.this.getStylePrimaryName()
+                td.setClassName(VScrollTablePatched.this.getStylePrimaryName()
                         + "-cell-content");

                 if (style != null && !style.equals("")) {
-                    td.addClassName(VScrollTable.this.getStylePrimaryName()
+                    td.addClassName(VScrollTablePatched.this.getStylePrimaryName()
                             + "-cell-content-" + style);
                 }

                 if (sorted) {
-                    td.addClassName(VScrollTable.this.getStylePrimaryName()
+                    td.addClassName(VScrollTablePatched.this.getStylePrimaryName()
                             + "-cell-content-sorted");
                 }

@@ -5767,18 +5824,18 @@
             protected void initCellWithWidget(Widget w, char align,
                     String style, boolean sorted, final TableCellElement td) {
                 final Element container = DOM.createDiv();
-                String className = VScrollTable.this.getStylePrimaryName()
+                String className = VScrollTablePatched.this.getStylePrimaryName()
                         + "-cell-content";
                 if (style != null && !style.equals("")) {
-                    className += " " + VScrollTable.this.getStylePrimaryName()
+                    className += " " + VScrollTablePatched.this.getStylePrimaryName()
                             + "-cell-content-" + style;
                 }
                 if (sorted) {
-                    className += " " + VScrollTable.this.getStylePrimaryName()
+                    className += " " + VScrollTablePatched.this.getStylePrimaryName()
                             + "-cell-content-sorted";
                 }
                 td.setClassName(className);
-                container.setClassName(VScrollTable.this.getStylePrimaryName()
+                container.setClassName(VScrollTablePatched.this.getStylePrimaryName()
                         + "-cell-wrapper");
                 setAlign(align, container);
                 td.appendChild(container);
@@ -5821,7 +5878,7 @@
              */
             private boolean handleClickEvent(Event event, Element targetTdOrTr,
                     boolean immediate) {
-                if (!client.hasEventListeners(VScrollTable.this,
+                if (!client.hasEventListeners(VScrollTablePatched.this,
                         TableConstants.ITEM_CLICK_EVENT_ID)) {
                     // Don't send an event if nobody is listening
                     return false;
@@ -6017,7 +6074,7 @@
                         if (enabled
                                 && (actionKeys != null || client
                                         .hasEventListeners(
-                                                VScrollTable.this,
+                                                VScrollTablePatched.this,
                                                 TableConstants.ITEM_CLICK_EVENT_ID))) {
                             /*
                              * Prevent browser context menu only if there are
@@ -6364,7 +6421,7 @@
                     Element targetTdOrTr) {
                 VTransferable transferable = new VTransferable();
                 transferable.setDragSource(ConnectorMap.get(client)
-                        .getConnector(VScrollTable.this));
+                        .getConnector(VScrollTablePatched.this));
                 transferable.setData("itemId", "" + rowKey);
                 NodeList<TableCellElement> cells = rowElement.getCells();
                 for (int i = 0; i < cells.getLength(); i++) {
@@ -6785,7 +6842,7 @@
      */
     public void updatePageLength() {
         // Only update if visible and enabled
-        if (!isVisible() || !enabled) {
+        if (!isVisibleInHierarchy() || !enabled) {
             return;
         }

@@ -6826,7 +6883,7 @@

     /** For internal use only. May be removed or replaced in the future. */
     public void updateWidth() {
-        if (!isVisible()) {
+        if (!isVisibleInHierarchy()) {
             /*
              * Do not update size when the table is hidden as all column widths
              * will be set to zero and they won't be recalculated when the table
@@ -6863,6 +6920,10 @@
     private static final int LAZY_COLUMN_ADJUST_TIMEOUT = 300;

     private final Timer lazyAdjustColumnWidths = new Timer() {
+
+        private int formerWidth;
+        private boolean formerScrolling;
+
         /**
          * Check for column widths, and available width, to see if we can fix
          * column widths "optimally". Doing this lazily to avoid expensive
@@ -6871,13 +6932,23 @@

         @Override
         public void run() {
-            if (scrollBody == null) {
+            if (scrollBody == null || !isVisibleInHierarchy()) {
                 // Try again later if we get here before scrollBody has been
                 // initalized
                 triggerLazyColumnAdjustment(false);
                 return;
             }

+            // MGNLUI-962 We don't want to recalculate column widths if table body's width itself hasn't changed.
+            int width = scrollBody.getAvailableWidth();
+            boolean scrolling = willHaveScrollbars();
+            if (width != formerWidth || scrolling != formerScrolling) {
+                formerWidth = width;
+                formerScrolling = scrolling;
+            } else {
+                return;
+            }
+
             Iterator<Widget> headCells = tHead.iterator();
             int usedMinimumWidth = 0;
             int totalExplicitColumnsWidths = 0;
@@ -7086,9 +7157,8 @@
                 }
                 int heightBefore = getOffsetHeight();
                 scrollBodyPanel.setHeight(bodyHeight + "px");
-
                 if (heightBefore != getOffsetHeight()) {
-                    Util.notifyParentOfSizeChange(VScrollTable.this, rendering);
+                    Util.notifyParentOfSizeChange(VScrollTablePatched.this, false);
                 }
             }

@@ -7590,7 +7660,7 @@

         @Override
         public ComponentConnector getConnector() {
-            return ConnectorMap.get(client).getConnector(VScrollTable.this);
+            return ConnectorMap.get(client).getConnector(VScrollTablePatched.this);
         }

         @Override
@@ -7988,7 +8058,7 @@
      * @param key
      *            The key to remove
      */
-    private void removeRowFromUnsentSelectionRanges(VScrollTableRow row) {
+    public void removeRowFromUnsentSelectionRanges(VScrollTableRow row) {
         Collection<SelectionRange> newRanges = null;
         for (Iterator<SelectionRange> iterator = selectedRowRanges.iterator(); iterator
                 .hasNext();) {

